Generated code is:{AExp=[Int , Id , AExp "/" AExp , AExp "+" AExp , "(" AExp ")" ], BExp=[Bool , AExp "<=" AExp , "!" BExp , BExp "&&" BExp , "(" BExp ")" ], Pgm=["int" Ids ";" Stmt ], Block=["{" "}" , "{" Stmt "}" ], Ids=[List{Id,","}  ], KResult=[Int , Bool ], Stmt=[Block , Id "=" AExp ";" , "if" "(" BExp ")" Block "else" Block , "while" "(" BExp ")" Block , Stmt Stmt ]}
DEF: /home/qangel/project/k-unified/imp.k -> IMP
module IMP
  configuration <generatedTop> <T color="yellow"> <k color="green"> $PGM:Pgm </k> <state color="red"> .Map  </state>  </T>  </generatedTop>   
  rule <generatedTop> <T> <k> ! T:Bool ~> GeneratedAnonVar13:K </k> GeneratedAnonVar14:Bag </T>  </generatedTop>  => <generatedTop> <T> <k> notBool T:Bool ~> GeneratedAnonVar13:K </k> GeneratedAnonVar14:Bag </T>  </generatedTop>  [ @org.kframework.backend.java.kil.JavaBackendRuleData(org.kframework.backend.java.kil.JavaBackendRuleData@75952723)] 
  rule <generatedTop> <T> <k> #token("#Bool", "false")() && GeneratedAnonVar0:BExp ~> GeneratedAnonVar17:K </k> GeneratedAnonVar18:Bag </T>  </generatedTop>  => <generatedTop> <T> <k> #token("#Bool", "false")()~> GeneratedAnonVar17:K </k> GeneratedAnonVar18:Bag </T>  </generatedTop>  [ @org.kframework.backend.java.kil.JavaBackendRuleData(org.kframework.backend.java.kil.JavaBackendRuleData@474c8d42)] 
  rule <generatedTop> <T> <k> #token("#Bool", "true")() && B:BExp ~> GeneratedAnonVar15:K </k> GeneratedAnonVar16:Bag </T>  </generatedTop>  => <generatedTop> <T> <k> B:BExp~> GeneratedAnonVar15:K </k> GeneratedAnonVar16:Bag </T>  </generatedTop>  [ @org.kframework.backend.java.kil.JavaBackendRuleData(org.kframework.backend.java.kil.JavaBackendRuleData@510ee215)] 
  rule <generatedTop> <T> <k> I1:Int + I2:Int ~> GeneratedAnonVar9:K </k> GeneratedAnonVar10:Bag </T>  </generatedTop>  => <generatedTop> <T> <k> I1:Int +Int I2:Int ~> GeneratedAnonVar9:K </k> GeneratedAnonVar10:Bag </T>  </generatedTop>  [ @org.kframework.backend.java.kil.JavaBackendRuleData(org.kframework.backend.java.kil.JavaBackendRuleData@629e9957)] 
  rule <generatedTop> <T> <k> I1:Int / I2:Int ~> GeneratedAnonVar7:K </k> GeneratedAnonVar8:Bag </T>  </generatedTop>  => <generatedTop> <T> <k> I1:Int /Int I2:Int ~> GeneratedAnonVar7:K </k> GeneratedAnonVar8:Bag </T>  </generatedTop>  requires I2:Int =/=Int #token("#Int", "0")()  [ @org.kframework.backend.java.kil.JavaBackendRuleData(org.kframework.backend.java.kil.JavaBackendRuleData@679864e0)] 
  rule <generatedTop> <T> <k> I1:Int <= I2:Int ~> GeneratedAnonVar11:K </k> GeneratedAnonVar12:Bag </T>  </generatedTop>  => <generatedTop> <T> <k> I1:Int <=Int I2:Int ~> GeneratedAnonVar11:K </k> GeneratedAnonVar12:Bag </T>  </generatedTop>  [ @org.kframework.backend.java.kil.JavaBackendRuleData(org.kframework.backend.java.kil.JavaBackendRuleData@5decbb5f)] 
  rule <generatedTop> <T> <k> S1:Stmt S2:Stmt ~> GeneratedAnonVar25:K </k> GeneratedAnonVar26:Bag </T>  </generatedTop>  => <generatedTop> <T> <k> S1:Stmt~> S2:Stmt~> GeneratedAnonVar25:K </k> GeneratedAnonVar26:Bag </T>  </generatedTop>  [ structural(),  @org.kframework.backend.java.kil.JavaBackendRuleData(org.kframework.backend.java.kil.JavaBackendRuleData@260f8704)] 
  rule <generatedTop> <T> <k> X:Id = I:Int ; ~> GeneratedAnonVar23:K </k> <state> '_Map_(X:Id |-> GeneratedAnonVar1:K ,, GeneratedAnonVar24:Map) </state>  </T>  </generatedTop>  => <generatedTop> <T> <k> .K~> GeneratedAnonVar23:K </k> <state> '_Map_(X:Id |-> I:Int ,, GeneratedAnonVar24:Map) </state>  </T>  </generatedTop>  [ @org.kframework.backend.java.kil.JavaBackendRuleData(org.kframework.backend.java.kil.JavaBackendRuleData@58a2c6a)] 
  rule <generatedTop> <T> <k> X:Id~> GeneratedAnonVar5:K </k> <state> '_Map_(X:Id |-> I:K ,, GeneratedAnonVar6:Map) </state>  </T>  </generatedTop>  => <generatedTop> <T> <k> I:K~> GeneratedAnonVar5:K </k> <state> '_Map_(X:Id |-> I:K ,, GeneratedAnonVar6:Map) </state>  </T>  </generatedTop>  [ @org.kframework.backend.java.kil.JavaBackendRuleData(org.kframework.backend.java.kil.JavaBackendRuleData@23216e17)] 
  rule <generatedTop> <T> <k> if ( #token("#Bool", "false")() ) GeneratedAnonVar3:Block else S:Block ~> GeneratedAnonVar29:K </k> GeneratedAnonVar30:Bag </T>  </generatedTop>  => <generatedTop> <T> <k> S:Block~> GeneratedAnonVar29:K </k> GeneratedAnonVar30:Bag </T>  </generatedTop>  [ @org.kframework.backend.java.kil.JavaBackendRuleData(org.kframework.backend.java.kil.JavaBackendRuleData@7ec02149)] 
  rule <generatedTop> <T> <k> if ( #token("#Bool", "true")() ) S:Block else GeneratedAnonVar2:Block ~> GeneratedAnonVar27:K </k> GeneratedAnonVar28:Bag </T>  </generatedTop>  => <generatedTop> <T> <k> S:Block~> GeneratedAnonVar27:K </k> GeneratedAnonVar28:Bag </T>  </generatedTop>  [ @org.kframework.backend.java.kil.JavaBackendRuleData(org.kframework.backend.java.kil.JavaBackendRuleData@4ea01c2a)] 
  rule <generatedTop> <T> <k> int '_,_(X:Id, Xs:Ids) ; GeneratedAnonVar4:Stmt  </k> <state> Rho:Map .Map   </state>  </T>  </generatedTop>  => <generatedTop> <T> <k> int Xs:Ids ; GeneratedAnonVar4:Stmt  </k> <state> Rho:Map X:Id |-> #token("#Int", "0")()   </state>  </T>  </generatedTop>  requires notBool X:Id in keys ( Rho:Map )    [ @org.kframework.backend.java.kil.JavaBackendRuleData(org.kframework.backend.java.kil.JavaBackendRuleData@70903e7b)] 
  rule <generatedTop> <T> <k> int .Ids ; S:Stmt ~> GeneratedAnonVar33:K </k> GeneratedAnonVar34:Bag </T>  </generatedTop>  => <generatedTop> <T> <k> S:Stmt~> GeneratedAnonVar33:K </k> GeneratedAnonVar34:Bag </T>  </generatedTop>  [ structural(),  @org.kframework.backend.java.kil.JavaBackendRuleData(org.kframework.backend.java.kil.JavaBackendRuleData@3e9f3d0f)] 
  rule <generatedTop> <T> <k> while ( B:BExp ) S:Block ~> GeneratedAnonVar31:K </k> GeneratedAnonVar32:Bag </T>  </generatedTop>  => <generatedTop> <T> <k> if ( B:BExp ) { S:Block while ( B:BExp ) S:Block   }  else { }  ~> GeneratedAnonVar31:K </k> GeneratedAnonVar32:Bag </T>  </generatedTop>  [ structural(),  @org.kframework.backend.java.kil.JavaBackendRuleData(org.kframework.backend.java.kil.JavaBackendRuleData@2afdab87)] 
  rule <generatedTop> <T> <k> { S:Stmt } ~> GeneratedAnonVar21:K </k> GeneratedAnonVar22:Bag </T>  </generatedTop>  => <generatedTop> <T> <k> S:Stmt~> GeneratedAnonVar21:K </k> GeneratedAnonVar22:Bag </T>  </generatedTop>  [ structural(),  @org.kframework.backend.java.kil.JavaBackendRuleData(org.kframework.backend.java.kil.JavaBackendRuleData@23327c53)] 
  rule <generatedTop> <T> <k> { } ~> GeneratedAnonVar19:K </k> GeneratedAnonVar20:Bag </T>  </generatedTop>  => <generatedTop> <T> <k> .K~> GeneratedAnonVar19:K </k> GeneratedAnonVar20:Bag </T>  </generatedTop>  [ structural(),  @org.kframework.backend.java.kil.JavaBackendRuleData(org.kframework.backend.java.kil.JavaBackendRuleData@7fc2e0b7)] 
  rule isKResult('_,_(K:K,, Ks:KList)) => isKResult(Ks:KList) requires isKResult(K:K) [ function(),  @org.kframework.backend.java.kil.JavaBackendRuleData(org.kframework.backend.java.kil.JavaBackendRuleData@1ed43328)] 
  syntax AExp ::= "(" AExp ")" 
 
  syntax AExp ::= AExp "+" AExp 
 
  syntax AExp ::= AExp "/" AExp 
 
  syntax AExp ::= Id 
 
  syntax AExp ::= Int 
 
  syntax BExp ::= "!" BExp 
 
  syntax BExp ::= "(" BExp ")" 
 
  syntax BExp ::= AExp "<=" AExp 
 
  syntax BExp ::= BExp "&&" BExp 
 
  syntax BExp ::= Bool 
 
  syntax Block ::= "{" "}" 
 
  syntax Block ::= "{" Stmt "}" 
 
  syntax Ids ::= List{Id,","}  
 
  syntax KResult ::= Bool 
 
  syntax KResult ::= Int 
 
  syntax Pgm ::= "int" Ids ";" Stmt 
 
  syntax Stmt ::= "if" "(" BExp ")" Block "else" Block 
 
  syntax Stmt ::= "while" "(" BExp ")" Block 
 
  syntax Stmt ::= Block 
 
  syntax Stmt ::= Id "=" AExp ";" 
 
  syntax Stmt ::= Stmt Stmt 
 
/* AExp*/ 
/* BExp*/ 
/* Block*/ 
/* Pgm*/ 
/* Stmt*/ 

endmodule 

