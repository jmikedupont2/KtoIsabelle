theory Imp
imports Main
begin

datatype AExp = 
 Value0 int | Id Int | '_/_ AExp AExp | '_+_ AExp AExp | '(_) AExp | AExpHole 
datatype BExp = 
 Value1 bool | '_<=_ AExp AExp | '!_ BExp | '_&&_ BExp BExp | '(_) BExp | BExpHole 
datatype Pgm = 
 'int_;_ Ids Stmt | PgmHole 
datatype Block = 
 '{} | '{_} Stmt | BlockHole 
datatype Ids = 
 '_,_ | IdsHole 
datatype Stmt = 
 Stmt2 Block| '_=_; Id AExp | 'if(_)_else_ BExp Block Block | 'while(_)_ BExp Block | '__ Stmt Stmt | StmtHole 
datatype KItem =  AExpKItem | BExpKItem | PgmKItem | BlockKItem | IdsKItem | StmtKItem 
type_synonym 'var K = "'var kItem list"
 datatype GeneratedLabel =  GENERATEDTOP | T | STATE | K 
inductive impTheRule where
rule0: " impTheRule (GENERATEDTOP, (T, (K, (X:Id # GeneratedAnonVar5:K)) # 
(STATE, ('_Map_ ('_|->_ X:Id I:K) 
GeneratedAnonVar6:Map)
))) (GENERATEDTOP, (T, (K, (I:K # GeneratedAnonVar5:K)) # 
(STATE, ('_Map_ ('_|->_ X:Id I:K) 
GeneratedAnonVar6:Map)
)))"
| rule1: " ('_=/=Int_ I2:Int ( 0 )
)  \<Longrightarrow> 
 impTheRule (GENERATEDTOP, (T, (K, (('_/_ I1:Int I2:Int) # GeneratedAnonVar7:K)) # 
GeneratedAnonVar8:Bag)) (GENERATEDTOP, (T, (K, (('_/Int_ I1:Int I2:Int) # GeneratedAnonVar7:K)) # 
GeneratedAnonVar8:Bag))"
| rule2: " impTheRule (GENERATEDTOP, (T, (K, (('_+_ I1:Int I2:Int) # GeneratedAnonVar9:K)) # 
GeneratedAnonVar10:Bag)) (GENERATEDTOP, (T, (K, (('_+Int_ I1:Int I2:Int) # GeneratedAnonVar9:K)) # 
GeneratedAnonVar10:Bag))"
| rule3: " impTheRule (GENERATEDTOP, (T, (K, (('_<=_ I1:Int I2:Int) # GeneratedAnonVar11:K)) # 
GeneratedAnonVar12:Bag)) (GENERATEDTOP, (T, (K, (('_<=Int_ I1:Int I2:Int) # GeneratedAnonVar11:K)) # 
GeneratedAnonVar12:Bag))"
| rule4: " impTheRule (GENERATEDTOP, (T, (K, (('!_ T:Bool) # GeneratedAnonVar13:K)) # 
GeneratedAnonVar14:Bag)) (GENERATEDTOP, (T, (K, (('notBool_ T:Bool) # GeneratedAnonVar13:K)) # 
GeneratedAnonVar14:Bag))"
| rule5: " impTheRule (GENERATEDTOP, (T, (K, (('_&&_ ( False )
 B:BExp) # GeneratedAnonVar15:K)) # 
GeneratedAnonVar16:Bag)) (GENERATEDTOP, (T, (K, (B:BExp # GeneratedAnonVar15:K)) # 
GeneratedAnonVar16:Bag))"
| rule6: " impTheRule (GENERATEDTOP, (T, (K, (('_&&_ ( False )
 GeneratedAnonVar0:BExp) # GeneratedAnonVar17:K)) # 
GeneratedAnonVar18:Bag)) (GENERATEDTOP, (T, (K, (( False )
 # GeneratedAnonVar17:K)) # 
GeneratedAnonVar18:Bag))"
| rule7: " impTheRule (GENERATEDTOP, (T, (K, (('{}) # GeneratedAnonVar19:K)) # 
GeneratedAnonVar20:Bag)) (GENERATEDTOP, (T, (K, ([])) # 
GeneratedAnonVar20:Bag))"
| rule8: " impTheRule (GENERATEDTOP, (T, (K, (('{_} S:Stmt) # GeneratedAnonVar21:K)) # 
GeneratedAnonVar22:Bag)) (GENERATEDTOP, (T, (K, (S:Stmt # GeneratedAnonVar21:K)) # 
GeneratedAnonVar22:Bag))"
| rule9: " impTheRule (GENERATEDTOP, (T, (K, (('_=_; X:Id I:Int) # GeneratedAnonVar23:K)) # 
(STATE, ('_Map_ ('_|->_ X:Id GeneratedAnonVar1:K) 
GeneratedAnonVar24:Map)
))) (GENERATEDTOP, (T, (K, ([])) # 
(STATE, ('_Map_ ('_|->_ X:Id I:Int) 
GeneratedAnonVar24:Map)
)))"
| rule10: " impTheRule (GENERATEDTOP, (T, (K, (('__ S1:Stmt S2:Stmt) # GeneratedAnonVar25:K)) # 
GeneratedAnonVar26:Bag)) (GENERATEDTOP, (T, (K, ((S1:Stmt # S2:Stmt) # GeneratedAnonVar25:K)) # 
GeneratedAnonVar26:Bag))"
| rule11: " impTheRule (GENERATEDTOP, (T, (K, (('if(_)_else_ ( False )
 S:Block GeneratedAnonVar2:Block) # GeneratedAnonVar27:K)) # 
GeneratedAnonVar28:Bag)) (GENERATEDTOP, (T, (K, (S:Block # GeneratedAnonVar27:K)) # 
GeneratedAnonVar28:Bag))"
| rule12: " impTheRule (GENERATEDTOP, (T, (K, (('if(_)_else_ ( False )
 GeneratedAnonVar3:Block S:Block) # GeneratedAnonVar29:K)) # 
GeneratedAnonVar30:Bag)) (GENERATEDTOP, (T, (K, (S:Block # GeneratedAnonVar29:K)) # 
GeneratedAnonVar30:Bag))"
| rule13: " impTheRule (GENERATEDTOP, (T, (K, (('while(_)_ B:BExp S:Block) # GeneratedAnonVar31:K)) # 
GeneratedAnonVar32:Bag)) (GENERATEDTOP, (T, (K, (('if(_)_else_ B:BExp ('{_} ('__ S:Block ('while(_)_ B:BExp S:Block))) ('{})) # GeneratedAnonVar31:K)) # 
GeneratedAnonVar32:Bag))"
| rule14: " ('notBool_ ('_in_ X:Id ('keys(_) Rho:Map)))  \<Longrightarrow> 
 impTheRule (GENERATEDTOP, (T, (K, ('int_;_ ('_,_ X:Id Xs:Ids) GeneratedAnonVar4:Stmt)) # 
(STATE, ('__ Rho:Map ('.Map))))) (GENERATEDTOP, (T, (K, ('int_;_ Xs:Ids GeneratedAnonVar4:Stmt)) # 
(STATE, ('__ Rho:Map ('_|->_ X:Id ( 0 )
)))))"
| rule15: " impTheRule (GENERATEDTOP, (T, (K, (('int_;_ [] S:Stmt) # GeneratedAnonVar33:K)) # 
GeneratedAnonVar34:Bag)) (GENERATEDTOP, (T, (K, (S:Stmt # GeneratedAnonVar33:K)) # 
GeneratedAnonVar34:Bag))"

end
